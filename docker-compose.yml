version: "3.3"

services:
#  proxy:
#    build:
#      context: .
#      dockerfile: docker-compose.traefik.yml
#    restart: always

  db:
    image: postgres:13
    volumes:
      - app-db-data:/varlib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - DATA=/var/lib/postgres/data/pgdata
    deploy:
      placement:
        constraints:
          - node.app.app-db-data == true

  backend:
    build: ./backend
    restart: always
    env_file:
      - .env
    depends_on:
      - db
    labels:
      # Enable Traefik for this specicif "backend" service
      - traefik.enable=true
      # Define the port inside of Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=80
      # Make traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`blyth.tech`)
      # Use Traefik public network
      - traefik.docker.network=traefik-public
      # Make traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`blyth.tech`)
      - traefik.http.routers.app-https.tls=true
      # Use le "le" (Let's Encrypt) resolver
      - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.app-http.middlewares=https-redirect
#      - traefik.http.routers.app-https.middleware=admin-auth

    networks:
      # Use public network created to be shared between Traefik and
      # any other service that need to be publicly available via HTTPS
      - traefik-public

volumes:
  app-db-data:

networks:
  traefik-public:
    external: true