version: "3.3"

networks:
  traefik-public:
    external: true
  traefik-internal:
    internal: true


services:

  proxy:
    image: traefik:v2.3
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
    #      # Listen on port 443, default for HTTPS
    #      - 443:443
    restart: always
      #    labels:
      #      # Enable Traefik for this service, to make it available in the public network
      #      - traefik.enable=true
      #      # Define the port inside of the Docker service to use
      #      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      #      # Make Traefik use this domain in HTTP
      #      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      #      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.blyth.tech`)
      #      # Use the traefik-public network (declared below)
      #      - traefik.docker.network=traefik-public
      ##      # traefik-https the actual router using HTTPS
      ##      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      ##      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.blyth.tech`)
      ##      - traefik.http.routers.traefik-dashboard-https.tls=true
      ##      # Use the "le" (Let's Encrypt) resolver created below
      ##      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      #      # Use the special Traefik service api@internal with the web UI/Dashboard
      #      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      #      # https-redirect middleware to redirect HTTP to HTTPS
      #      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      #      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      #      # traefik-http set up only to use the middleware to redirect to https
      #      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # admin-auth middleware with HTTP Basic auth
    # Using the environment variables USERNAME and HASHED_PASSWORD
    #      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
    #      # Enable HTTP Basic auth, using the middleware created above
    #      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
    #      # Mount the volume to store the certificates
    #      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      #      # Create an entrypoint "https" listening on port 443
      #      - --entrypoints.https.address=:443
      #      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      #      - --certificatesresolvers.le.acme.email=blythcorn@gmail.com
      #      # Store the Let's Encrypt certificates in the mounted volume
      #      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      #      # Use the TLS Challenge for Let's Encrypt
      #      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
    #      # Enable the Dashboard and API
    #      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public



  db:
    image: postgres:13-alpine
    restart: unless-stopped
    volumes:
      - app-db-data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres-user
      - POSTGRES_PASSWORD=postgres-password
      - POSTGRES_DB=lms-app

    networks:
      - traefik-internal

  #  pgadmin:
  #    image: dpage/pgadmin4
  #    networks:
  #      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #      - default
  #    depends_on:
  #      - db
  #    env_file:
  #      - .env
  #    labels:
  #      - traefik.enable=true
  #      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #      - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.entrypoints=http
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.entrypoints=https
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls=true
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls.certresolver=le
  #      - traefik.http.services.${STACK_NAME?Variable not set}-pgadmin.loadbalancer.server.port=5050
  #
  ##  queue:
  ##    image: rabbitmq:3
  #    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
  #    # image: rabbitmq:3-management
  #    #
  #    # You also have to change the flower command

  #  flower:
  #    image: mher/flower
  #    networks:
  #      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #      - default
  #    env_file:
  #      - .env
  #    command:
  #      - "--broker=amqp://guest@queue:5672//"
  #      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
  #      # and change the queue service's image as well
  #      # - "--broker_api=http://guest:guest@queue:15672/api//"
  #
  #    labels:
  #      - traefik.enable=true
  #      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #      - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
  #      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
  #      - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  backend:
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    #    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; uvicorn main:app --host 0.0.0.0'
    env_file:
      - .env
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`blyth.tech`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      #      # Make Traefik use this domain in HTTPS
      #      - traefik.http.routers.app-https.entrypoints=https
      #      - traefik.http.routers.app-https.rule=Host(`blyth.tech`)
      #      - traefik.http.routers.app-https.tls=true
      #      # Use the "le" (Let's Encrypt) resolver
      #      - traefik.http.routers.app-https.tls.certresolver=le
      #      # https-redirect middleware to redirect HTTP to HTTPS
      #      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      #      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
    #      - traefik.http.routers.app-http.middlewares=https-redirect
    #      - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
      - traefik-internal
  #  celeryworker:
  #    image: '${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}'
  #    depends_on:
  #      - db
  #      - queue
  #    env_file:
  #      - .env
  #    environment:
  #      - SERVER_NAME=${DOMAIN?Variable not set}
  #      - SERVER_HOST=https://${DOMAIN?Variable not set}
  #      # Allow explicit env var override for tests
  #      - SMTP_HOST=${SMTP_HOST?Variable not set}
  #    build:
  #      context: ./backend
  #      dockerfile: celeryworker.dockerfile
  #      args:
  #        INSTALL_DEV: ${INSTALL_DEV-false}

  #    frontend:
  #      image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
  #      build:
  #        context: ./frontend
  #        args:
  #          FRONTEND_ENV: ${FRONTEND_ENV-production}
  #
  #      labels:
  #        - traefik.enable=true
  #        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
  #        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
  #        - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

volumes:
  # Create the volume to store the certificates, theres is a constrain to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS Certificates
  traefik-public-certificates:
  app-db-data:
